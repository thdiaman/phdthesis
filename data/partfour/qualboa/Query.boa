p: Project = input;
Files: output top(150) of string weight float;

out: string;
cur_file: string;
method_name: array of string;
method_type: array of string;

class_name:= "Stack";
method_name = {"pop", "push", "empty"};
method_type = {"Object", "void", "boolean"};
length:= len(method_name);

#flag for a match in method name
Flag_method_name: array of bool;
#flag for an exact match in method name
Flag_exact_match: array of bool;
#flag for a match in method type
Flag_method_type: array of bool;

Flag_method_name = new(Flag_method_name, length, false);
Flag_exact_match = new(Flag_exact_match, length, false);
Flag_method_type = new(Flag_method_type, length, false);

#Variables used for metric calculations
score: float;
complex: float;
coupling: int;
loc: float;
depth: float;
efferent: int;
Decl_name: string;
var_type: string;
var_types: array of string;
var_types = new(var_types, 30, "");
pointer: int;
flag: bool;
var_names: array of string;
method1_var_access: array of bool;
method2_var_access: array of bool;
cohesion: int;

visit(p, visitor {
	# only look at the latest snapshot of java files
	before node: CodeRepository -> {
		snapshot := getsnapshot(node, "SOURCE_JAVA_JLS");
		foreach (i: int; def(snapshot[i]))
			visit(snapshot[i]);
		stop;
	}
	before node: ChangedFile -> {
		cur_file = node.name;
	}
	#Check the class name and visit the methods
	before node: Declaration -> {
	    Decl_name = node.name;
		if (node.kind == TypeKind.CLASS && (class_name == "-1" || match(lowercase(class_name), lowercase(node.name)))){
			for (j:= 0; j < length; j++){
				Flag_method_name[j] = false;
				Flag_exact_match[j] = false;
				Flag_method_type[j] = false;
			}
			foreach (i: int; def(node.methods[i]))
				visit(node.methods[i]);
		}else
			stop;
	}
	#Set the flags depending on the method names and types
	before node: Method -> {
		for (i:= 0; i < length ; i++){
			if (match(lowercase(method_name[i]), lowercase(node.name))){
				Flag_method_name[i] = true;
				if (lowercase(method_name[i]) == lowercase(node.name))
					Flag_exact_match[i] = true;
				if (method_type[i] == "-1" || lowercase(node.return_type.name) == lowercase(method_type[i])){
					Flag_method_type[i] = true;
					stop;
				}else
					stop;
			}
		}
		stop;
	}
	#Calculate every metric
	after node: Declaration -> {
		#proceed if there is at least one match
		exists (i: int; (Flag_method_name[i] == true)){
			#counters to count the Flags
			counter1:= 0;
			counter2:= 0;
			counter3:= 0;
			for (k:= 0; k < length ; k++){
				if (Flag_method_name[k] == true) counter1++;
				if (Flag_exact_match[k] == false) counter2++;
				if (Flag_method_type[k] == false) counter3++;
			}
			#Continue only for files that miss at most 1 method
			if (counter1 > (length - 2)){
				out = format("%s/blob/master/%s", p.project_url, cur_file);
				#calculate score
				score = 0;
				for (l:= 0; l < length ; l++){
					if (counter1 == (length - l)){
						if (counter2 > 0 && counter3 > 0)
							score = 80 - (30*l) - (5*counter2/length) - (5*counter3/length);
						else if (counter2 > 0)
							score = 100 - (30*l) - (10*counter2/length);
						else if (counter3 > 0)
							score = 90 - (30*l) - (10*counter3/length);
						else
							score = 100 - (30*l);
						break;
					}
				}
		
				#Calculate complexity, coupling, LoC and part of efferent coupling.
				#Visit the statements node for each method.
				complex = 0;
				coupling = 0;
				loc = 0;
				efferent = 0;
				pointer = 0;
				
				foreach (a: int; var_types[a])
					var_types[a] = "";
		
				foreach (a: int; def(node.methods[a])){
		    		foreach (b: int; def(node.methods[a].statements[b]))
			    		visit(node.methods[a].statements[b]);
				}
				if (len(node.methods) != 0){
	    			complex = complex / len(node.methods) + 1;
	    			loc = loc / len(node.methods);
	    		} 
				if (def(node.fields))
					coupling = coupling + len(node.fields);
		
				out = format("%s, Average Cyclomatic Complexity = %f", out, complex);
				out = format("%s, Coupling = %d", out, coupling);
				out = format("%s, LOC per Method = %f", out, loc);
		
				#Calculate the rest efferent coupling.
				#Finding all the variable types that are depending on an external package or class.
				#Maximum 30 different variable types. (Upper threshold is 20)
				foreach (a: int; def(node.fields[a])){
					var_type = node.fields[a].variable_type.name;
					if (var_type != "int" && var_type != "int[]" && var_type != "float" && var_type != "float[]" 
						&& var_type != "String" && var_type != "String[]" && var_type != "char" && var_type != "char[]" 
						&& var_type != "long" && var_type != "long[]" && var_type != "double" && var_type != "double[]" 
						&& var_type != "byte" && var_type != "byte[]" && var_type != "short" && var_type != "short[]" 
						&& var_type != "boolean" && var_type != "boolean[]" && var_type != node.name && var_type != (node.name + "[]")){
							flag = false;
							for (n:=0; n < pointer ; n++){
					    		if (var_type == var_types[n]) flag = true;
							}
							if (flag == false){
					    		efferent++;
					    		if (pointer < 30){
					        		var_types[pointer] = var_type;
					       			pointer++;
					    		}
							}
					}
				}
				out = format("%s, Efferent couplings = %d", out, efferent);
		
				#Calculate average block depth per method
				# using a recursive visitor pattern to find the maximum block depth.
				max: float;
				sum_max: float;
				inner_max: float;
				sum_max = 0;
				foreach (a: int; def(node.methods[a])){
					max = 0;
		    		foreach (b: int; def(node.methods[a].statements[b])){
		    			depth = 0;
		    			inner_max = 0;
			    		visit(node.methods[a].statements[b], visitor{
			    			before node:Statement -> {
			    				if (node.kind != StatementKind.OTHER && node.kind != StatementKind.LABEL){
			    					if (node.kind != StatementKind.BLOCK)
			    						depth = depth + 1;
			    					foreach(c: int; def(node.statements[c])){
			    						visit(node.statements[c]);
			    					}
			    				}
			    				if (depth > inner_max)
			    					inner_max = depth;
			    				depth = depth - 1;
			    				stop;
			    			}
			   			});
			    		if (inner_max > max)
			    			max = inner_max;
					}
					sum_max = sum_max + max;
				}
				depth = sum_max / len(node.methods);
				out = format("%s, Average Block depth = %f", out, depth);
				
				#Calculate cohesion in methods.
				#Searching for method couples that access at least one common variable.
				#Cohesion equals to method couples that don't have a variable access in common
				# minus method couples that have a variable access in common
				cohesion = 0;
				var_names = new(var_names, len(node.fields), "");
				
				#create boolean variable access arrays to check every possible method couple
				method1_var_access = new(method1_var_access, len(node.fields), false);
				method2_var_access = new(method2_var_access, len(node.fields), false);
				
				#get all the variable names
				foreach (a: int; def(node.fields[a]))
					var_names[a] = node.fields[a].name;
					
				#Start to go through the methods
				for (z:=0; z < len(node.methods) - 1 ; z++){
					foreach (a: int; var_names[a])
						method1_var_access[a] = false;
					#search which variables are accessed by method 1
					foreach (a: int; def(node.methods[z].statements[a])){
			    		visit(node.methods[z].statements[a], visitor{
			    			before node:Expression -> {
			    				if (node.kind == ExpressionKind.VARACCESS){
	    							foreach (b: int; var_names[b]){
	    								if (var_names[b] == node.variable)
	    									method1_var_access[b] = true;
	    							}
	    						}
	    						#stop if all variables are accessed by method 1
	    						flag = false;
	    						foreach (b: int; var_names[b]){
	    							if (method1_var_access[b] == false)
	    								flag = true;
	    						}
	    						if (flag == false)
	    							stop;
	    					}
			    		});   
					}
			
					for (x:= z + 1; x < len(node.methods); x++){
						foreach (a: int; var_names[a])
							method2_var_access[a] = false;
						#search which variables are accessed by method 2
						foreach (a: int; def(node.methods[x].statements[a])){
			    			visit(node.methods[x].statements[a], visitor{
			    				before node:Expression -> {
			    					if (node.kind == ExpressionKind.VARACCESS){
	    								foreach (b: int; var_names[b]){
	    									if (var_names[b] == node.variable)
	    										method2_var_access[b] = true;
	    								}
	    							}
	    							#stop if all variables are accessed by method 2
	    							flag = false;
	    							foreach (b: int; var_names[b]){
	    								if (method2_var_access[b] == false)
	    									flag = true;
	    							}
	    							if (flag == false)
	    								stop;
	    						}
			   				});
			    		}
			    		#Check if there is a variable that both methods access
			    		flag = false;
			    		foreach (a: int; var_names[a]){
			    			if (method1_var_access[a] == true && method2_var_access[a] == true){
			    				flag = true;
			    				break;
			    			}
			    		}
			    		if (flag == true)
			    			cohesion = cohesion - 1;
			    		else
			    			cohesion = cohesion + 1;
					}
				}
				out = format("%s, Cohesion in Methods =  %d", out, cohesion);
		
				#Calculate public fields
				public_fields: int;
				is_public: int;
				public_fields = 0;
				foreach (a: int; def(node.fields[a])){
					is_public = 0;
					foreach (b: int; def(node.fields[a].modifiers[b])){
						if (node.fields[a].modifiers[b].kind == ModifierKind.VISIBILITY && node.fields[a].modifiers[b].visibility == Visibility.PUBLIC){
							is_public = 1;
							break;
						}
					}
					if (is_public == 1)
						public_fields++;
				}
				out = format("%s, Public Fields = %d", out, public_fields);
		
				#Calculate public methods
				public_methods: int;
				public_methods = 0;
				foreach (a: int; def(node.methods[a])){
					is_public = 0;
					foreach (b: int; def(node.methods[a].modifiers[b])){
						if (node.methods[a].modifiers[b].kind == ModifierKind.VISIBILITY && node.methods[a].modifiers[b].visibility == Visibility.PUBLIC){
							is_public = 1;
							break;
						}
					}
					if (is_public == 1)
						public_methods++;
				}
				out = format("%s, Public Methods = %d", out, public_methods);
		
				#Finally, output everything
				Files << out weight score;
			}
		}
	}
	#Visiting the Statement node to calculate complexity, coupling, LoC and efferent coupling
	before node:Statement -> {
		if (node.kind == StatementKind.IF || node.kind == StatementKind.WHILE || node.kind == StatementKind.FOR || node.kind == StatementKind.CASE)
			complex = complex + 1;
		if (node.kind == StatementKind.RETURN)
			coupling++;
		if (node.kind != StatementKind.OTHER && node.kind != StatementKind.LABEL && node.kind != StatementKind.BLOCK)
			loc = loc + 1;
	}
	#Visiting the Expression node to calculate coupling and efferent coupling
	before node: Expression -> {
	    if (node.kind == ExpressionKind.VARDECL){
	    	coupling++;
	    	
	    	foreach (c: int; def(node.variable_decls[c])){
	    		var_type = node.variable_decls[c].variable_type.name;
				if (var_type != "int" && var_type != "int[]" && var_type != "float" && var_type != "float[]" 
					&& var_type != "String" && var_type != "String[]" && var_type != "char" && var_type != "char[]" 
					&& var_type != "long" && var_type != "long[]" && var_type != "double" && var_type != "double[]" 
					&& var_type != "byte" && var_type != "byte[]" && var_type != "short" && var_type != "short[]" 
					&& var_type != "boolean" && var_type != "boolean[]" && var_type != Decl_name && var_type != (Decl_name + "[]")){
						flag = false;
					    for (m:=0; m < pointer ; m++){
				    	    if (var_type == var_types[m]) flag = true;
					    }
		    			if (flag == false){
			    		    efferent++;
				    	    if (pointer < 30){
					            var_types[pointer]=var_type;
					            pointer++;
					        }
						}
				}
	    	}
	    }
	    stop;
	}
	before Modifier,Variable,Type -> stop;
});